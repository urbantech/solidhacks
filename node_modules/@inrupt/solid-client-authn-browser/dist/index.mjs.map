{"version":3,"file":"index.mjs","sources":["../src/storage/StorageUtility.ts","../src/ClientAuthentication.ts","../src/login/oidc/OidcLoginHandler.ts","../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts","../src/login/oidc/IssuerConfigFetcher.ts","../src/sessionInfo/SessionInfoManager.ts","../src/login/oidc/incomingRedirectHandler/FallbackRedirectHandler.ts","../src/login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler.ts","../src/login/oidc/AggregateRedirectHandler.ts","../src/storage/BrowserStorage.ts","../src/login/oidc/Redirector.ts","../src/login/oidc/ClientRegistrar.ts","../src/login/oidc/incomingRedirectHandler/ErrorOidcHandler.ts","../src/login/oidc/refresh/TokenRefresher.ts","../src/dependencies.ts","../src/constant.ts","../src/Session.ts","../src/defaultSession.ts"],"sourcesContent":["//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * A helper class that will validate items taken from local storage\n */\nimport type { IStorage } from \"@inrupt/solid-client-authn-core\";\nimport { StorageUtility } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * This class in a no-value-added extension of StorageUtility from the core module.\n * The reason it has to be declared is for TSyringe to find the decorators in the\n * same modules as where the dependency container is declared (in this case,\n * the browser module, with the dependancy container in dependencies.ts).\n * @hidden\n */\nexport default class StorageUtilityBrowser extends StorageUtility {\n  constructor(secureStorage: IStorage, insecureStorage: IStorage) {\n    super(secureStorage, insecureStorage);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  ISessionInfo,\n  ISessionInternalInfo,\n  ILoginOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  EVENTS,\n  isValidRedirectUrl,\n  ClientAuthentication as ClientAuthenticationBase,\n} from \"@inrupt/solid-client-authn-core\";\nimport { removeOidcQueryParam } from \"@inrupt/oidc-client-ext\";\nimport type { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport default class ClientAuthentication extends ClientAuthenticationBase {\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (\n    options: ILoginOptions,\n    eventEmitter: EventEmitter,\n  ): Promise<void> => {\n    // In order to get a clean start, make sure that the session is logged out\n    // on login.\n    // But we may want to preserve our client application info, particularly if\n    // we used Dynamic Client Registration to register (since we don't\n    // necessarily want the user to have to register this app each time they\n    // login).\n    await this.sessionInfoManager.clear(options.sessionId);\n\n    // In the case of the user hitting the 'back' button in their browser, they\n    // could return to a previous redirect URL that contains OIDC params that\n    // are now longer valid. To be safe, strip relevant params now.\n    // If the user is providing a redirect IRI, it should not be modified, so\n    // normalization only applies if we default to the current location (which is\n    // a bad practice and should be discouraged).\n    const redirectUrl =\n      options.redirectUrl ?? removeOidcQueryParam(window.location.href);\n    if (!isValidRedirectUrl(redirectUrl)) {\n      throw new Error(\n        `${redirectUrl} is not a valid redirect URL, it is either a malformed IRI, includes a hash fragment, or reserved query parameters ('code' or 'state').`,\n      );\n    }\n    await this.loginHandler.handle({\n      ...options,\n      redirectUrl,\n      // If no clientName is provided, the clientId may be used instead.\n      clientName: options.clientName ?? options.clientId,\n      eventEmitter,\n    });\n  };\n\n  // Collects session information from storage, and returns them. Returns null\n  // if the expected information cannot be found.\n  // Note that the ID token is not stored, which means the session information\n  // cannot be validated at this point.\n  validateCurrentSession = async (\n    currentSessionId: string,\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | null> => {\n    const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\n    if (\n      sessionInfo === undefined ||\n      sessionInfo.clientAppId === undefined ||\n      sessionInfo.issuer === undefined\n    ) {\n      return null;\n    }\n    return sessionInfo;\n  };\n\n  handleIncomingRedirect = async (\n    url: string,\n    eventEmitter: EventEmitter,\n  ): Promise<ISessionInfo | undefined> => {\n    try {\n      const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\n      // The `FallbackRedirectHandler` directly returns the global `fetch` for\n      // his value, so we should ensure it's bound to `window` rather than to\n      // ClientAuthentication, to avoid the following error:\n      // > 'fetch' called on an object that does not implement interface Window.\n      this.fetch = redirectInfo.fetch.bind(window);\n      this.boundLogout = redirectInfo.getLogoutUrl;\n\n      // Strip the oauth params:\n      this.cleanUrlAfterRedirect(url);\n\n      return {\n        isLoggedIn: redirectInfo.isLoggedIn,\n        webId: redirectInfo.webId,\n        sessionId: redirectInfo.sessionId,\n        expirationDate: redirectInfo.expirationDate,\n      };\n    } catch (err) {\n      // Strip the oauth params:\n      this.cleanUrlAfterRedirect(url);\n\n      // FIXME: EVENTS.ERROR should be errorCode, errorDescription\n      //\n      // I'm not sure if \"redirect\" is a good error code, and in theory `err`\n      // maybe an Error object and not a string; Maybe we want to just hardcode\n      // a description instead?\n      eventEmitter.emit(EVENTS.ERROR, \"redirect\", err);\n\n      return undefined;\n    }\n  };\n\n  private cleanUrlAfterRedirect(url: string): void {\n    const cleanedUpUrl = new URL(url);\n    cleanedUpUrl.searchParams.delete(\"state\");\n    // For auth code flow\n    cleanedUpUrl.searchParams.delete(\"code\");\n    // For implicit flow\n    cleanedUpUrl.searchParams.delete(\"id_token\");\n    cleanedUpUrl.searchParams.delete(\"access_token\");\n    // For login error\n    cleanedUpUrl.searchParams.delete(\"error\");\n    cleanedUpUrl.searchParams.delete(\"error_description\");\n    cleanedUpUrl.searchParams.delete(\"iss\");\n\n    // Remove OAuth-specific query params (since the login flow finishes with\n    // the browser being redirected back with OAuth2 query params (e.g. for\n    // 'code' and 'state'), and so if the user simply refreshes this page our\n    // authentication library will be called again with what are now invalid\n    // query parameters!).\n    window.history.replaceState(null, \"\", cleanedUpUrl.toString());\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport type {\n  IClientRegistrar,\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  ConfigurationError,\n  handleRegistration,\n} from \"@inrupt/solid-client-authn-core\";\n\nfunction hasIssuer(\n  options: ILoginOptions,\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\nfunction hasRedirectUrl(\n  options: ILoginOptions,\n): options is ILoginOptions & { redirectUrl: string } {\n  return typeof options.redirectUrl === \"string\";\n}\n\n/**\n * @hidden\n */\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private oidcHandler: IOidcHandler,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar,\n  ) {\n    this.storageUtility = storageUtility;\n    this.oidcHandler = oidcHandler;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n  }\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options,\n        )}`,\n      );\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n          options,\n        )}`,\n      );\n    }\n\n    // Fetch issuer config.\n    const issuerConfig: IIssuerConfig =\n      await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n\n    const clientRegistration = await handleRegistration(\n      options,\n      issuerConfig,\n      this.storageUtility,\n      this.clientRegistrar,\n    );\n\n    // Construct OIDC Options\n    const OidcOptions: IOidcOptions = {\n      // Note that here, the issuer is not the one from the received options, but\n      // from the issuer's config. This enforces the canonical URL is used and stored,\n      // which is also the one present in the ID token, so storing a technically\n      // valid, but different issuer URL (e.g. using a trailing slash or not) now\n      // could prevent from validating the ID token later.\n      issuer: issuerConfig.issuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      ...options,\n      issuerConfiguration: issuerConfig,\n      client: clientRegistration,\n    };\n\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Authorization Code with PKCE Flow\n */\nimport type {\n  IOidcHandler,\n  IOidcOptions,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  DEFAULT_SCOPES,\n  AuthorizationCodeWithPkceOidcHandlerBase,\n} from \"@inrupt/solid-client-authn-core\";\nimport { OidcClient } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\n * PKCE: https://tools.ietf.org/html/rfc7636\n */\nexport default class AuthorizationCodeWithPkceOidcHandler\n  extends AuthorizationCodeWithPkceOidcHandlerBase\n  implements IOidcHandler\n{\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    /* eslint-disable camelcase */\n    const oidcOptions = {\n      authority: oidcLoginOptions.issuer.toString(),\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n      redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      response_type: \"code\",\n      scope: DEFAULT_SCOPES,\n      filterProtocolClaims: true,\n      // The userinfo endpoint on NSS fails, so disable this for now\n      // Note that in Solid, information should be retrieved from the\n      // profile referenced by the WebId.\n      loadUserInfo: false,\n      code_verifier: true,\n      prompt: oidcLoginOptions.prompt ?? \"consent\",\n    };\n    /* eslint-enable camelcase */\n\n    const oidcClientLibrary = new OidcClient(oidcOptions);\n\n    try {\n      const signingRequest = await oidcClientLibrary.createSigninRequest();\n      // Make sure to await the promise before returning so that the error is caught.\n      return await this.handleRedirect({\n        oidcLoginOptions,\n        // eslint-disable-next-line no-underscore-dangle\n        state: signingRequest.state._id,\n        // eslint-disable-next-line no-underscore-dangle\n        codeVerifier: signingRequest.state._code_verifier,\n        targetUrl: signingRequest.url.toString(),\n      });\n    } catch (err: unknown) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    // The login is only completed AFTER redirect, so nothing to return here.\n    return undefined;\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for fetching an IDP configuration\n */\nimport type {\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n} from \"@inrupt/solid-client-authn-core\";\nimport { ConfigurationError } from \"@inrupt/solid-client-authn-core\";\nimport { fetch as uniFetch } from \"@inrupt/universal-fetch\";\n\nexport const WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\n\n/* eslint-disable camelcase */\nconst issuerConfigKeyMap: Record<\n  string,\n  { toKey: string; convertToUrl?: boolean }\n> = {\n  issuer: {\n    toKey: \"issuer\",\n    convertToUrl: true,\n  },\n  authorization_endpoint: {\n    toKey: \"authorizationEndpoint\",\n    convertToUrl: true,\n  },\n  token_endpoint: {\n    toKey: \"tokenEndpoint\",\n    convertToUrl: true,\n  },\n  userinfo_endpoint: {\n    toKey: \"userinfoEndpoint\",\n    convertToUrl: true,\n  },\n  jwks_uri: {\n    toKey: \"jwksUri\",\n    convertToUrl: true,\n  },\n  registration_endpoint: {\n    toKey: \"registrationEndpoint\",\n    convertToUrl: true,\n  },\n  end_session_endpoint: {\n    toKey: \"endSessionEndpoint\",\n    convertToUrl: true,\n  },\n  scopes_supported: { toKey: \"scopesSupported\" },\n  response_types_supported: { toKey: \"responseTypesSupported\" },\n  response_modes_supported: { toKey: \"responseModesSupported\" },\n  grant_types_supported: { toKey: \"grantTypesSupported\" },\n  acr_values_supported: { toKey: \"acrValuesSupported\" },\n  subject_types_supported: { toKey: \"subjectTypesSupported\" },\n  id_token_signing_alg_values_supported: {\n    toKey: \"idTokenSigningAlgValuesSupported\",\n  },\n  id_token_encryption_alg_values_supported: {\n    toKey: \"idTokenEncryptionAlgValuesSupported\",\n  },\n  id_token_encryption_enc_values_supported: {\n    toKey: \"idTokenEncryptionEncValuesSupported\",\n  },\n  userinfo_signing_alg_values_supported: {\n    toKey: \"userinfoSigningAlgValuesSupported\",\n  },\n  userinfo_encryption_alg_values_supported: {\n    toKey: \"userinfoEncryptionAlgValuesSupported\",\n  },\n  userinfo_encryption_enc_values_supported: {\n    toKey: \"userinfoEncryptionEncValuesSupported\",\n  },\n  request_object_signing_alg_values_supported: {\n    toKey: \"requestObjectSigningAlgValuesSupported\",\n  },\n  request_object_encryption_alg_values_supported: {\n    toKey: \"requestObjectEncryptionAlgValuesSupported\",\n  },\n  request_object_encryption_enc_values_supported: {\n    toKey: \"requestObjectEncryptionEncValuesSupported\",\n  },\n  token_endpoint_auth_methods_supported: {\n    toKey: \"tokenEndpointAuthMethodsSupported\",\n  },\n  token_endpoint_auth_signing_alg_values_supported: {\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\n  },\n  display_values_supported: { toKey: \"displayValuesSupported\" },\n  claim_types_supported: { toKey: \"claimTypesSupported\" },\n  claims_supported: { toKey: \"claimsSupported\" },\n  service_documentation: { toKey: \"serviceDocumentation\" },\n  claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\n  ui_locales_supported: { toKey: \"uiLocalesSupported\" },\n  claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\n  request_parameter_supported: { toKey: \"requestParameterSupported\" },\n  request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\n  require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\n  op_policy_uri: {\n    toKey: \"opPolicyUri\",\n    convertToUrl: true,\n  },\n  op_tos_uri: {\n    toKey: \"opTosUri\",\n    convertToUrl: true,\n  },\n};\n/* eslint-enable camelcase */\n\nfunction processConfig(\n  config: Record<string, string | string[]>,\n): IIssuerConfig {\n  const parsedConfig: Record<string, string | string[]> = {};\n  Object.keys(config).forEach((key) => {\n    if (issuerConfigKeyMap[key]) {\n      // TODO: PMcB55: Validate URL if \"issuerConfigKeyMap[key].convertToUrl\"\n      //  if (issuerConfigKeyMap[key].convertToUrl) {\n      //   validateUrl(config[key]);\n      //  }\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n    }\n  });\n  if (!Array.isArray(parsedConfig.scopesSupported)) {\n    parsedConfig.scopesSupported = [\"openid\"];\n  }\n  return parsedConfig as unknown as IIssuerConfig;\n}\n\n/**\n * @hidden\n */\nexport default class IssuerConfigFetcher implements IIssuerConfigFetcher {\n  constructor(private storageUtility: IStorageUtility) {\n    this.storageUtility = storageUtility;\n  }\n\n  // This method needs no state (so can be static), and can be exposed to allow\n  // callers to know where this implementation puts state it needs.\n  public static getLocalStorageKey(issuer: string): string {\n    return `issuerConfig:${issuer}`;\n  }\n\n  async fetchConfig(issuer: string): Promise<IIssuerConfig> {\n    let issuerConfig: IIssuerConfig;\n\n    const openIdConfigUrl = new URL(\n      WELL_KNOWN_OPENID_CONFIG,\n      // Make sure to append a slash at issuer URL, so that the .well-known URL\n      // includes the full issuer path. See https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig.\n      issuer.endsWith(\"/\") ? issuer : `${issuer}/`,\n    ).href;\n    const issuerConfigRequestBody = await uniFetch.call(\n      globalThis,\n      openIdConfigUrl,\n    );\n    // Check the validity of the fetched config\n    try {\n      issuerConfig = processConfig(await issuerConfigRequestBody.json());\n    } catch (err) {\n      throw new ConfigurationError(\n        `[${issuer.toString()}] has an invalid configuration: ${\n          (err as { message: string }).message\n        }`,\n      );\n    }\n\n    // Update store with fetched config\n    await this.storageUtility.set(\n      IssuerConfigFetcher.getLocalStorageKey(issuer),\n      JSON.stringify(issuerConfig),\n    );\n\n    return issuerConfig;\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  ISessionInfo,\n  ISessionInfoManager,\n  ISessionInternalInfo,\n  IStorageUtility,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  isSupportedTokenType,\n  clear as clearBase,\n  SessionInfoManagerBase,\n  isValidRedirectUrl,\n} from \"@inrupt/solid-client-authn-core\";\nimport { clearOidcPersistentStorage } from \"@inrupt/oidc-client-ext\";\n\nexport { getUnauthenticatedSession } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @param sessionId\n * @param storage\n * @hidden\n */\nexport async function clear(\n  sessionId: string,\n  storage: IStorageUtility,\n): Promise<void> {\n  await clearBase(sessionId, storage);\n  await clearOidcPersistentStorage();\n}\n\n/**\n * @hidden\n */\nexport class SessionInfoManager\n  extends SessionInfoManagerBase\n  implements ISessionInfoManager\n{\n  async get(\n    sessionId: string,\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> {\n    const [\n      isLoggedIn,\n      webId,\n      clientId,\n      clientSecret,\n      redirectUrl,\n      refreshToken,\n      issuer,\n      tokenType,\n    ] = await Promise.all([\n      this.storageUtility.getForUser(sessionId, \"isLoggedIn\", {\n        secure: true,\n      }),\n      this.storageUtility.getForUser(sessionId, \"webId\", {\n        secure: true,\n      }),\n      this.storageUtility.getForUser(sessionId, \"clientId\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(sessionId, \"clientSecret\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(sessionId, \"redirectUrl\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(sessionId, \"refreshToken\", {\n        secure: true,\n      }),\n      this.storageUtility.getForUser(sessionId, \"issuer\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(sessionId, \"tokenType\", {\n        secure: false,\n      }),\n    ]);\n\n    if (typeof redirectUrl === \"string\" && !isValidRedirectUrl(redirectUrl)) {\n      // This resolves the issue for people experiencing https://github.com/inrupt/solid-client-authn-js/issues/2891.\n      // An invalid redirect URL is present in the storage, and the session should\n      // be cleared to get a fresh start. This will require the user to log back in.\n      await Promise.all([\n        this.storageUtility.deleteAllUserData(sessionId, { secure: false }),\n        this.storageUtility.deleteAllUserData(sessionId, { secure: true }),\n      ]);\n      return undefined;\n    }\n\n    if (tokenType !== undefined && !isSupportedTokenType(tokenType)) {\n      throw new Error(`Tokens of type [${tokenType}] are not supported.`);\n    }\n\n    if (\n      clientId === undefined &&\n      isLoggedIn === undefined &&\n      webId === undefined &&\n      refreshToken === undefined\n    ) {\n      return undefined;\n    }\n\n    return {\n      sessionId,\n      webId,\n      isLoggedIn: isLoggedIn === \"true\",\n      redirectUrl,\n      refreshToken,\n      issuer,\n      clientAppId: clientId,\n      clientAppSecret: clientSecret,\n      // Default the token type to DPoP if unspecified.\n      tokenType: tokenType ?? \"DPoP\",\n    };\n  }\n\n  /**\n   * This function removes all session-related information from storage.\n   * @param sessionId the session identifier\n   * @param storage the storage where session info is stored\n   * @hidden\n   */\n  async clear(sessionId: string): Promise<void> {\n    return clear(sessionId, this.storageUtility);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\n\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\n\n/**\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\n * session. It serves as a fallback so that consuming libraries don't have to test\n * for the query params themselves, and can always try to use them as a redirect IRI.\n * @hidden\n */\nexport class FallbackRedirectHandler implements IIncomingRedirectHandler {\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      // The next URL object is built for validating it.\n      // eslint-disable-next-line no-new\n      new URL(redirectUrl);\n      return true;\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`,\n      );\n    }\n  }\n\n  async handle(\n    // The argument is ignored, but must be present to implement the interface\n    _redirectUrl: string,\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    return getUnauthenticatedSession();\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n// FIXME: The following doesn't work in the browser, it results in all the fetches\n// being unauthenticated. This should be looked into when migrating to universal-fetch.\n// import { fetch } from \"cross-fetch\";\n\nimport { fetch as uniFetch } from \"@inrupt/universal-fetch\";\n\nimport type {\n  IClient,\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  IIncomingRedirectHandler,\n  ISessionInfoManager,\n  IStorageUtility,\n  ITokenRefresher,\n  RefreshOptions,\n  IncomingRedirectResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  buildAuthenticatedFetch,\n  loadOidcContextFromStorage,\n  maybeBuildRpInitiatedLogout,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { CodeExchangeResult } from \"@inrupt/oidc-client-ext\";\nimport { getDpopToken, getBearerToken } from \"@inrupt/oidc-client-ext\";\nimport type { EventEmitter } from \"events\";\n\nconst globalFetch: typeof uniFetch = (...args) =>\n  uniFetch.call(globalThis, ...args);\n\n/**\n * @hidden\n */\nexport class AuthCodeRedirectHandler implements IIncomingRedirectHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private sessionInfoManager: ISessionInfoManager,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar,\n    private tokerRefresher: ITokenRefresher,\n  ) {\n    this.storageUtility = storageUtility;\n    this.sessionInfoManager = sessionInfoManager;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n    this.tokerRefresher = tokerRefresher;\n  }\n\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      const myUrl = new URL(redirectUrl);\n      return (\n        myUrl.searchParams.get(\"code\") !== null &&\n        myUrl.searchParams.get(\"state\") !== null\n      );\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`,\n      );\n    }\n  }\n\n  async handle(\n    redirectUrl: string,\n    eventEmitter?: EventEmitter,\n  ): Promise<IncomingRedirectResult> {\n    if (!(await this.canHandle(redirectUrl))) {\n      throw new Error(\n        `AuthCodeRedirectHandler cannot handle [${redirectUrl}]: it is missing one of [code, state].`,\n      );\n    }\n\n    const url = new URL(redirectUrl);\n    const oauthState = url.searchParams.get(\"state\") as string;\n\n    const storedSessionId = (await this.storageUtility.getForUser(\n      oauthState,\n      \"sessionId\",\n      {\n        errorIfNull: true,\n      },\n    )) as string;\n\n    const {\n      issuerConfig,\n      codeVerifier,\n      redirectUrl: storedRedirectIri,\n      dpop: isDpop,\n    } = await loadOidcContextFromStorage(\n      storedSessionId,\n      this.storageUtility,\n      this.issuerConfigFetcher,\n    );\n\n    const iss = url.searchParams.get(\"iss\");\n\n    if (typeof iss === \"string\" && iss !== issuerConfig.issuer) {\n      throw new Error(\n        `The value of the iss parameter (${iss}) does not match the issuer identifier of the authorization server (${issuerConfig.issuer}). See [rfc9207](https://www.rfc-editor.org/rfc/rfc9207.html#section-2.3-3.1.1)`,\n      );\n    }\n\n    if (codeVerifier === undefined) {\n      throw new Error(\n        `The code verifier for session ${storedSessionId} is missing from storage.`,\n      );\n    }\n\n    if (storedRedirectIri === undefined) {\n      throw new Error(\n        `The redirect URL for session ${storedSessionId} is missing from storage.`,\n      );\n    }\n\n    const client: IClient = await this.clientRegistrar.getClient(\n      { sessionId: storedSessionId },\n      issuerConfig,\n    );\n\n    let tokens: CodeExchangeResult;\n    const tokenCreatedAt = Date.now();\n\n    if (isDpop) {\n      tokens = await getDpopToken(issuerConfig, client, {\n        grantType: \"authorization_code\",\n        // We rely on our 'canHandle' function checking that the OAuth 'code'\n        // parameter is present in our query string.\n        code: url.searchParams.get(\"code\") as string,\n        codeVerifier,\n        redirectUrl: storedRedirectIri,\n      });\n\n      // Delete oidc-client-specific session information from storage. This is\n      // done automatically when retrieving a bearer token, but since the DPoP\n      // binding uses our custom code, this needs to be done manually.\n      window.localStorage.removeItem(`oidc.${oauthState}`);\n    } else {\n      tokens = await getBearerToken(url.toString());\n    }\n\n    let refreshOptions: RefreshOptions | undefined;\n    if (tokens.refreshToken !== undefined) {\n      refreshOptions = {\n        sessionId: storedSessionId,\n        refreshToken: tokens.refreshToken,\n        tokenRefresher: this.tokerRefresher,\n      };\n    }\n\n    const authFetch = await buildAuthenticatedFetch(\n      globalFetch,\n      tokens.accessToken,\n      {\n        dpopKey: tokens.dpopKey,\n        refreshOptions,\n        eventEmitter,\n        expiresIn: tokens.expiresIn,\n      },\n    );\n\n    await this.storageUtility.setForUser(\n      storedSessionId,\n      {\n        webId: tokens.webId,\n        isLoggedIn: \"true\",\n      },\n      { secure: true },\n    );\n\n    const sessionInfo = await this.sessionInfoManager.get(storedSessionId);\n    if (!sessionInfo) {\n      throw new Error(`Could not retrieve session: [${storedSessionId}].`);\n    }\n\n    return Object.assign(sessionInfo, {\n      fetch: authFetch,\n      getLogoutUrl: maybeBuildRpInitiatedLogout({\n        idTokenHint: tokens.idToken,\n        endSessionEndpoint: issuerConfig.endSessionEndpoint,\n      }),\n      expirationDate:\n        typeof tokens.expiresIn === \"number\"\n          ? tokenCreatedAt + tokens.expiresIn * 1000\n          : undefined,\n    } as IncomingRedirectResult);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for selecting the correct OidcHandler to handle the provided OIDC Options\n */\nimport type {\n  IIncomingRedirectHandler,\n  IncomingRedirectInput,\n  IncomingRedirectResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport { AggregateHandler } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport default class AggregateRedirectHandler\n  extends AggregateHandler<IncomingRedirectInput, IncomingRedirectResult>\n  implements IIncomingRedirectHandler\n{\n  constructor(redirectHandlers: IIncomingRedirectHandler[]) {\n    super(redirectHandlers);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type { IStorage } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport default class BrowserStorage implements IStorage {\n  get storage(): typeof window.localStorage {\n    return window.localStorage;\n  }\n\n  async get(key: string): Promise<string | undefined> {\n    return this.storage.getItem(key) || undefined;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    this.storage.setItem(key, value);\n  }\n\n  async delete(key: string): Promise<void> {\n    this.storage.removeItem(key);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IRedirector,\n  IRedirectorOptions,\n} from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport default class Redirector implements IRedirector {\n  redirect(redirectUrl: string, options?: IRedirectorOptions): void {\n    if (options && options.handleRedirect) {\n      options.handleRedirect(redirectUrl);\n    } else if (options && options.redirectByReplacingState) {\n      window.history.replaceState({}, \"\", redirectUrl);\n    } else {\n      window.location.href = redirectUrl;\n    }\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IStorageUtility,\n  IClientRegistrar,\n  IIssuerConfig,\n  IClient,\n  IClientRegistrarOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport { registerClient } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n */\nexport default class ClientRegistrar implements IClientRegistrar {\n  constructor(private storageUtility: IStorageUtility) {\n    this.storageUtility = storageUtility;\n  }\n\n  async getClient(\n    options: IClientRegistrarOptions,\n    issuerConfig: IIssuerConfig,\n  ): Promise<IClient> {\n    // If client secret and/or client id are stored in storage, use those.\n    const [\n      storedClientId,\n      storedClientSecret,\n      // storedClientName,\n    ] = await Promise.all([\n      this.storageUtility.getForUser(options.sessionId, \"clientId\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(options.sessionId, \"clientSecret\", {\n        secure: false,\n      }),\n      // this.storageUtility.getForUser(options.sessionId, \"clientName\", {\n      //   // FIXME: figure out how to persist secure storage at reload\n      //   secure: false,\n      // }),\n    ]);\n    if (storedClientId) {\n      return {\n        clientId: storedClientId,\n        clientSecret: storedClientSecret,\n        clientType: \"dynamic\",\n      };\n    }\n\n    try {\n      const registeredClient = await registerClient(options, issuerConfig);\n      // Save info\n      const infoToSave: Record<string, string> = {\n        clientId: registeredClient.clientId,\n      };\n      if (registeredClient.clientSecret) {\n        infoToSave.clientSecret = registeredClient.clientSecret;\n      }\n      if (registeredClient.idTokenSignedResponseAlg) {\n        infoToSave.idTokenSignedResponseAlg =\n          registeredClient.idTokenSignedResponseAlg;\n      }\n      await this.storageUtility.setForUser(options.sessionId, infoToSave, {\n        // FIXME: figure out how to persist secure storage at reload\n        // Otherwise, the client info cannot be retrieved from storage, and\n        // the lib tries to re-register the client on each fetch\n        secure: false,\n      });\n      return registeredClient;\n    } catch (error) {\n      throw new Error(`Client registration failed: [${error}]`);\n    }\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\nimport { EVENTS } from \"@inrupt/solid-client-authn-core\";\nimport type { EventEmitter } from \"events\";\n\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\n\n/**\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\n * session. It serves as a fallback so that consuming libraries don't have to test\n * for the query params themselves, and can always try to use them as a redirect IRI.\n * @hidden\n */\nexport class ErrorOidcHandler implements IIncomingRedirectHandler {\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      // eslint-disable-next-line no-new\n      return new URL(redirectUrl).searchParams.has(\"error\");\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`,\n      );\n    }\n  }\n\n  async handle(\n    redirectUrl: string,\n    eventEmitter?: EventEmitter,\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    if (eventEmitter !== undefined) {\n      const url = new URL(redirectUrl);\n      const errorUrl = url.searchParams.get(\"error\");\n      const errorDescriptionUrl = url.searchParams.get(\"error_description\");\n      eventEmitter.emit(EVENTS.ERROR, errorUrl, errorDescriptionUrl);\n    }\n    return getUnauthenticatedSession();\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IClient,\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n  KeyPair,\n  ITokenRefresher,\n  TokenEndpointResponse,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  loadOidcContextFromStorage,\n  EVENTS,\n} from \"@inrupt/solid-client-authn-core\";\nimport { refresh } from \"@inrupt/oidc-client-ext\";\nimport type { EventEmitter } from \"events\";\n\n// Some identifiers are not in camelcase on purpose, as they are named using the\n// official names from the OIDC/OAuth2 specifications.\n/* eslint-disable camelcase */\n\n/**\n * @hidden\n */\nexport default class TokenRefresher implements ITokenRefresher {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar,\n  ) {\n    this.storageUtility = storageUtility;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n  }\n\n  async refresh(\n    sessionId: string,\n    refreshToken?: string,\n    dpopKey?: KeyPair,\n    eventEmitter?: EventEmitter,\n  ): Promise<TokenEndpointResponse> {\n    const oidcContext = await loadOidcContextFromStorage(\n      sessionId,\n      this.storageUtility,\n      this.issuerConfigFetcher,\n    );\n    // This should also retrieve the client from storage\n    const clientInfo: IClient = await this.clientRegistrar.getClient(\n      { sessionId },\n      oidcContext.issuerConfig,\n    );\n\n    if (refreshToken === undefined) {\n      // TODO: in a next PR, look up storage for a refresh token\n      throw new Error(\n        `Session [${sessionId}] has no refresh token to allow it to refresh its access token.`,\n      );\n    }\n\n    if (oidcContext.dpop && dpopKey === undefined) {\n      throw new Error(\n        `For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`,\n      );\n    }\n\n    const tokenSet = await refresh(\n      refreshToken,\n      oidcContext.issuerConfig,\n      clientInfo,\n      dpopKey,\n    );\n\n    if (tokenSet.refreshToken !== undefined) {\n      eventEmitter?.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\n      await this.storageUtility.setForUser(sessionId, {\n        refreshToken: tokenSet.refreshToken,\n      });\n    }\n    return tokenSet;\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Top Level core document. Responsible for setting up the dependency graph\n */\nimport type { IStorage } from \"@inrupt/solid-client-authn-core\";\nimport {\n  InMemoryStorage,\n  IWaterfallLogoutHandler,\n} from \"@inrupt/solid-client-authn-core\";\nimport StorageUtilityBrowser from \"./storage/StorageUtility\";\nimport ClientAuthentication from \"./ClientAuthentication\";\nimport OidcLoginHandler from \"./login/oidc/OidcLoginHandler\";\nimport AuthorizationCodeWithPkceOidcHandler from \"./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler\";\nimport IssuerConfigFetcher from \"./login/oidc/IssuerConfigFetcher\";\nimport { FallbackRedirectHandler } from \"./login/oidc/incomingRedirectHandler/FallbackRedirectHandler\";\nimport { SessionInfoManager } from \"./sessionInfo/SessionInfoManager\";\nimport { AuthCodeRedirectHandler } from \"./login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler\";\nimport AggregateRedirectHandler from \"./login/oidc/AggregateRedirectHandler\";\nimport BrowserStorage from \"./storage/BrowserStorage\";\nimport Redirector from \"./login/oidc/Redirector\";\nimport ClientRegistrar from \"./login/oidc/ClientRegistrar\";\nimport { ErrorOidcHandler } from \"./login/oidc/incomingRedirectHandler/ErrorOidcHandler\";\nimport TokenRefresher from \"./login/oidc/refresh/TokenRefresher\";\n\n/**\n *\n * @param dependencies\n * @deprecated This function will be removed from the external API in an upcoming release.\n */\nexport function getClientAuthenticationWithDependencies(dependencies: {\n  secureStorage?: IStorage;\n  insecureStorage?: IStorage;\n}): ClientAuthentication {\n  const inMemoryStorage = new InMemoryStorage();\n  const secureStorage = dependencies.secureStorage || inMemoryStorage;\n  const insecureStorage = dependencies.insecureStorage || new BrowserStorage();\n\n  const storageUtility = new StorageUtilityBrowser(\n    secureStorage,\n    insecureStorage,\n  );\n\n  const issuerConfigFetcher = new IssuerConfigFetcher(storageUtility);\n  const clientRegistrar = new ClientRegistrar(storageUtility);\n\n  const sessionInfoManager = new SessionInfoManager(storageUtility);\n\n  const tokenRefresher = new TokenRefresher(\n    storageUtility,\n    issuerConfigFetcher,\n    clientRegistrar,\n  );\n\n  const redirector = new Redirector();\n\n  // make new handler for redirect and login\n  const loginHandler = new OidcLoginHandler(\n    storageUtility,\n    new AuthorizationCodeWithPkceOidcHandler(storageUtility, redirector),\n    issuerConfigFetcher,\n    clientRegistrar,\n  );\n\n  const redirectHandler = new AggregateRedirectHandler([\n    new ErrorOidcHandler(),\n    new AuthCodeRedirectHandler(\n      storageUtility,\n      sessionInfoManager,\n      issuerConfigFetcher,\n      clientRegistrar,\n      tokenRefresher,\n    ),\n    // This catch-all class will always be able to handle the\n    // redirect IRI, so it must be registered last.\n    new FallbackRedirectHandler(),\n  ]);\n\n  return new ClientAuthentication(\n    loginHandler,\n    redirectHandler,\n    new IWaterfallLogoutHandler(sessionInfoManager, redirector),\n    sessionInfoManager,\n    issuerConfigFetcher,\n  );\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { SOLID_CLIENT_AUTHN_KEY_PREFIX } from \"@inrupt/solid-client-authn-core\";\n\nexport const KEY_CURRENT_SESSION = `${SOLID_CLIENT_AUTHN_KEY_PREFIX}currentSession`;\n\nexport const KEY_CURRENT_URL = `${SOLID_CLIENT_AUTHN_KEY_PREFIX}currentUrl`;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n */\nimport type {\n  ILoginInputOptions,\n  ISessionInfo,\n  IStorage,\n  IHasSessionEventListener,\n  ISessionEventListener,\n  ILogoutOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport { EVENTS, buildProxyHandler } from \"@inrupt/solid-client-authn-core\";\nimport type { fetch } from \"@inrupt/universal-fetch\";\nimport { v4 } from \"uuid\";\nimport EventEmitter from \"events\";\nimport type ClientAuthentication from \"./ClientAuthentication\";\nimport { getClientAuthenticationWithDependencies } from \"./dependencies\";\nimport { KEY_CURRENT_SESSION, KEY_CURRENT_URL } from \"./constant\";\n\nexport interface ISessionOptions {\n  /**\n   * A private storage, unreachable to other scripts on the page. Typically in-memory.\n   */\n  secureStorage: IStorage;\n  /**\n   * A storage where non-sensitive information may be stored, potentially longer-lived than the secure storage.\n   */\n  insecureStorage: IStorage;\n  /**\n   * Details about the current session\n   */\n  sessionInfo: ISessionInfo;\n  /**\n   * An instance of the library core. Typically obtained using `getClientAuthenticationWithDependencies`.\n   */\n  clientAuthentication: ClientAuthentication;\n}\n\nexport interface IHandleIncomingRedirectOptions {\n  /**\n   * If the user has signed in before, setting this to `true` will automatically\n   * redirect them to their Solid Identity Provider, which will then attempt to\n   * re-activate the session and send the user back to your app without\n   * requiring user interaction.\n   * If your app's access has not expired yet and re-activation completed\n   * successfully, a `sessionRestore` event will be fired with the URL the user\n   * was at before they were redirected to their Solid Identity Provider.\n   * {@see onSessionRestore}\n   */\n  restorePreviousSession?: boolean;\n\n  /**\n   * Inrupt's Enterprise Solid Server can set a cookie to allow the browser to\n   * access private resources on a Pod. In order to mitigate the logout-on-refresh\n   * issue on the short term, the server also implemented a session endpoint\n   * enabling the client app to know whether the cookie is set. When a user\n   * logs in to a server that has that capability enabled, applications that set\n   * this option to `true` will be able to make use of it.\n   *\n   * If your app supports the newest session restore approach, and `restorePreviousSession`\n   * is set to true, this option is automatically set to false, but your app will\n   * not be logged out when reloaded.\n   *\n   * `useEssSession` defaults to false and will be removed in the future; to\n   * preserve sessions across page reloads, use of `restorePreviousSession` is\n   * recommended.\n   *\n   * @deprecated unreleased\n   */\n  useEssSession?: boolean;\n  /**\n   * The URL of the page handling the redirect, including the query\n   * parameters — these contain the information to process the login.\n   * Note: as a convenience, if no URL value is specified here, we default to\n   * using the browser's current location.\n   */\n  url?: string;\n}\n\nexport async function silentlyAuthenticate(\n  sessionId: string,\n  clientAuthn: ClientAuthentication,\n  session: Session,\n): Promise<boolean> {\n  const storedSessionInfo = await clientAuthn.validateCurrentSession(sessionId);\n  if (storedSessionInfo !== null) {\n    // It can be really useful to save the user's current browser location,\n    // so that we can restore it after completing the silent authentication\n    // on incoming redirect. This way, the user is eventually redirected back\n    // to the page they were on and not to the app's redirect page.\n    window.localStorage.setItem(KEY_CURRENT_URL, window.location.href);\n    await clientAuthn.login(\n      {\n        sessionId,\n        prompt: \"none\",\n        oidcIssuer: storedSessionInfo.issuer,\n        redirectUrl: storedSessionInfo.redirectUrl,\n        clientId: storedSessionInfo.clientAppId,\n        clientSecret: storedSessionInfo.clientAppSecret,\n        tokenType: storedSessionInfo.tokenType ?? \"DPoP\",\n      },\n      session.events,\n    );\n    return true;\n  }\n  return false;\n}\n\nfunction isLoggedIn(\n  sessionInfo?: ISessionInfo,\n): sessionInfo is ISessionInfo & { isLoggedIn: true } {\n  return !!sessionInfo?.isLoggedIn;\n}\n\n/**\n * A {@link Session} object represents a user's session on an application. The session holds state, as it stores information enabling acces to private resources after login for instance.\n */\nexport class Session extends EventEmitter implements IHasSessionEventListener {\n  /**\n   * Information regarding the current session.\n   */\n  public readonly info: ISessionInfo;\n\n  /**\n   * Session attribute exposing the EventEmitter interface, to listen on session\n   * events such as login, logout, etc.\n   * @since 1.15.0\n   */\n  public readonly events: ISessionEventListener;\n\n  private clientAuthentication: ClientAuthentication;\n\n  private tokenRequestInProgress = false;\n\n  /**\n   * Session object constructor. Typically called as follows:\n   *\n   * ```typescript\n   * const session = new Session();\n   * ```\n   *\n   * See also [getDefaultSession](https://docs.inrupt.com/developer-tools/api/javascript/solid-client-authn-browser/functions.html#getdefaultsession).\n   *\n   * @param sessionOptions The options enabling the correct instantiation of\n   * the session. Either both storages or clientAuthentication are required. For\n   * more information, see {@link ISessionOptions}.\n   * @param sessionId A string uniquely identifying the session.\n   *\n   */\n  constructor(\n    sessionOptions: Partial<ISessionOptions> = {},\n    sessionId: string | undefined = undefined,\n  ) {\n    super();\n    // Until Session no longer implements EventEmitter, this.events is just a proxy\n    // to this (with some interface filtering). When we make the breaking change,\n    // this.events will be a regular EventEmitter (implementing ISessionEventEmitter):\n    // this.events = new EventEmitter();\n    this.events = new Proxy(\n      this,\n      buildProxyHandler(\n        Session.prototype,\n        \"events only implements ISessionEventListener\",\n      ),\n    );\n    if (sessionOptions.clientAuthentication) {\n      this.clientAuthentication = sessionOptions.clientAuthentication;\n    } else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {\n      this.clientAuthentication = getClientAuthenticationWithDependencies({\n        secureStorage: sessionOptions.secureStorage,\n        insecureStorage: sessionOptions.insecureStorage,\n      });\n    } else {\n      this.clientAuthentication = getClientAuthenticationWithDependencies({});\n    }\n\n    if (sessionOptions.sessionInfo) {\n      this.info = {\n        sessionId: sessionOptions.sessionInfo.sessionId,\n        isLoggedIn: false,\n        webId: sessionOptions.sessionInfo.webId,\n      };\n    } else {\n      this.info = {\n        sessionId: sessionId ?? v4(),\n        isLoggedIn: false,\n      };\n    }\n\n    // When a session is logged in, we want to track its ID in local storage to\n    // enable silent refresh. The current session ID specifically stored in 'localStorage'\n    // (as opposed to using our storage abstraction layer) because it is only\n    // used in a browser-specific mechanism.\n    this.events.on(EVENTS.LOGIN, () =>\n      window.localStorage.setItem(KEY_CURRENT_SESSION, this.info.sessionId),\n    );\n\n    this.events.on(EVENTS.SESSION_EXPIRED, () => this.internalLogout(false));\n\n    this.events.on(EVENTS.ERROR, () => this.internalLogout(false));\n  }\n\n  /**\n   * Triggers the login process. Note that this method will redirect the user away from your app.\n   *\n   * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.\n   * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by {@linkcode handleIncomingRedirect}.\n   */\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (options: ILoginInputOptions): Promise<void> => {\n    await this.clientAuthentication.login(\n      {\n        sessionId: this.info.sessionId,\n        ...options,\n        // Defaults the token type to DPoP\n        tokenType: options.tokenType ?? \"DPoP\",\n      },\n      this.events,\n    );\n    // `login` redirects the user away from the app,\n    // so unless it throws an error, there is no code that should run afterwards\n    // (since there is no \"after\" in the lifetime of the script).\n    // Hence, this Promise never resolves:\n    return new Promise(() => {});\n  };\n\n  /**\n   * Fetches data using available login information. If the user is not logged in, this will behave as a regular `fetch`. The signature of this method is identical to the [canonical `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n   *\n   * @param url The URL from which data should be fetched.\n   * @param init Optional parameters customizing the request, by specifying an HTTP method, headers, a body, etc. Follows the [WHATWG Fetch Standard](https://fetch.spec.whatwg.org/).\n   */\n  fetch: typeof fetch = (url, init) =>\n    this.clientAuthentication.fetch(url, init);\n\n  /**\n   * An internal logout function, to control whether or not the logout signal\n   * should be sent, i.e. if the logout was user-initiated or is the result of\n   * an external event.\n   *\n   * @hidden\n   */\n  private internalLogout = async (\n    emitSignal: boolean,\n    options?: ILogoutOptions,\n  ): Promise<void> => {\n    // Clearing this value means that silent refresh will no longer be attempted.\n    // In particular, in the case of a silent authentication error it prevents\n    // from getting stuck in an authentication retries loop.\n    window.localStorage.removeItem(KEY_CURRENT_SESSION);\n    await this.clientAuthentication.logout(this.info.sessionId, options);\n    this.info.isLoggedIn = false;\n    if (emitSignal) {\n      (this.events as EventEmitter).emit(EVENTS.LOGOUT);\n    }\n  };\n\n  /**\n   * Logs the user out of the application.\n   *\n   * There are 2 types of logout supported by this library,\n   * `app` logout and `idp` logout.\n   *\n   * App logout will log the user out within the application\n   * by clearing any session data from the browser. It does\n   * not log the user out of their Solid identity provider,\n   * and should not redirect the user away.\n   * App logout can be performed as follows:\n   * ```typescript\n   * await session.logout({ logoutType: 'app' });\n   * ```\n   *\n   * IDP logout will log the user out of their Solid identity provider,\n   * and will redirect the user away from the application to do so. In order\n   * for users to be redirected back to `postLogoutUrl` you MUST include the\n   * `postLogoutUrl` value in the `post_logout_redirect_uris` field in the\n   * [Client ID Document](https://docs.inrupt.com/ess/latest/security/authentication/#client-identifier-client-id).\n   * IDP logout can be performed as follows:\n   * ```typescript\n   * await session.logout({\n   *  logoutType: 'idp',\n   *  // An optional URL to redirect to after logout has completed;\n   *  // this MUST match a logout URL listed in the Client ID Document\n   *  // of the application that is logged in.\n   *  // If the application is logged in with a Client ID that is not\n   *  // a URI dereferencing to a Client ID Document then users will\n   *  // not be redirected back to the `postLogoutUrl` after logout.\n   *  postLogoutUrl: 'https://example.com/logout',\n   *  // An optional value to be included in the query parameters\n   *  // when the IDP provider redirects the user to the postLogoutRedirectUrl.\n   *  state: \"my-state\"\n   * });\n   * ```\n   */\n  logout = async (options?: ILogoutOptions): Promise<void> =>\n    this.internalLogout(true, options);\n\n  /**\n   * Completes the login process by processing the information provided by the\n   * Solid identity provider through redirect.\n   *\n   * @param options See {@see IHandleIncomingRedirectOptions}.\n   */\n  handleIncomingRedirect = async (\n    inputOptions: string | IHandleIncomingRedirectOptions = {},\n  ): Promise<ISessionInfo | undefined> => {\n    if (this.info.isLoggedIn) {\n      return this.info;\n    }\n\n    if (this.tokenRequestInProgress) {\n      return undefined;\n    }\n    const options =\n      typeof inputOptions === \"string\" ? { url: inputOptions } : inputOptions;\n    const url = options.url ?? window.location.href;\n\n    this.tokenRequestInProgress = true;\n    const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(\n      url,\n      this.events,\n    );\n    if (isLoggedIn(sessionInfo)) {\n      this.setSessionInfo(sessionInfo);\n      const currentUrl = window.localStorage.getItem(KEY_CURRENT_URL);\n      if (currentUrl === null) {\n        // The login event can only be triggered **after** the user has been\n        // redirected from the IdP with access and ID tokens.\n        (this.events as EventEmitter).emit(EVENTS.LOGIN);\n      } else {\n        // If an URL is stored in local storage, we are being logged in after a\n        // silent authentication, so remove our currently stored URL location\n        // to clean up our state now that we are completing the re-login process.\n        window.localStorage.removeItem(KEY_CURRENT_URL);\n        (this.events as EventEmitter).emit(EVENTS.SESSION_RESTORED, currentUrl);\n      }\n    } else if (options.restorePreviousSession === true) {\n      // Silent authentication happens after a refresh, which means there are no\n      // OAuth params in the current location IRI. It can only succeed if a session\n      // was previously logged in, in which case its ID will be present with a known\n      // identifier in local storage.\n      // Check if we have a locally stored session ID...\n      const storedSessionId = window.localStorage.getItem(KEY_CURRENT_SESSION);\n      // ...if not, then there is no ID token, and so silent authentication cannot happen, but\n      // if we do have a stored session ID, attempt to re-authenticate now silently.\n      if (storedSessionId !== null) {\n        const attemptedSilentAuthentication = await silentlyAuthenticate(\n          storedSessionId,\n          this.clientAuthentication,\n          this,\n        );\n        // At this point, we know that the main window will imminently be redirected.\n        // However, this redirect is asynchronous and there is no way to halt execution\n        // until it happens precisely. That's why the current Promise simply does not\n        // resolve.\n        if (attemptedSilentAuthentication) {\n          return new Promise(() => {});\n        }\n      }\n    }\n    this.tokenRequestInProgress = false;\n    return sessionInfo;\n  };\n\n  /**\n   * Register a callback function to be called when a user completes login.\n   *\n   * The callback is called when {@link handleIncomingRedirect} completes successfully.\n   *\n   * @param callback The function called when a user completes login.\n   * @deprecated Prefer session.events.on(EVENTS.LOGIN, callback)\n   */\n  onLogin(callback: () => unknown): void {\n    this.events.on(EVENTS.LOGIN, callback);\n  }\n\n  /**\n   * Register a callback function to be called when a user logs out:\n   *\n   * @param callback The function called when a user completes logout.\n   * @deprecated Prefer session.events.on(EVENTS.LOGOUT, callback)\n   */\n  onLogout(callback: () => unknown): void {\n    this.events.on(EVENTS.LOGOUT, callback);\n  }\n\n  /**\n   * Register a callback function to be called when a user logs out:\n   *\n   * @param callback The function called when an error occurs.\n   * @since 1.11.0\n   * @deprecated Prefer session.events.on(EVENTS.ERROR, callback)\n   */\n  onError(\n    callback: (\n      error: string | null,\n      errorDescription?: string | null,\n    ) => unknown,\n  ): void {\n    this.events.on(EVENTS.ERROR, callback);\n  }\n\n  /**\n   * Register a callback function to be called when a session is restored.\n   *\n   * Note: the callback will be called with the saved value of the 'current URL'\n   * at the time the session was restored.\n   *\n   * @param callback The function called when a user's already logged-in session is restored, e.g., after a silent authentication is completed after a page refresh.\n   * @deprecated Prefer session.events.on(EVENTS.SESSION_RESTORED, callback)\n   */\n  onSessionRestore(callback: (currentUrl: string) => unknown): void {\n    this.events.on(EVENTS.SESSION_RESTORED, callback);\n  }\n\n  /**\n   * Register a callback that runs when the session expires and can no longer\n   * make authenticated requests, but following a user logout.\n   * @param callback The function that runs on session expiration.\n   * @since 1.11.0\n   * @deprecated Prefer session.events.on(EVENTS.SESSION_EXPIRED, callback)\n   */\n  onSessionExpiration(callback: () => unknown): void {\n    this.events.on(EVENTS.SESSION_EXPIRED, callback);\n  }\n\n  private setSessionInfo(\n    sessionInfo: ISessionInfo & { isLoggedIn: true },\n  ): void {\n    this.info.isLoggedIn = sessionInfo.isLoggedIn;\n    this.info.webId = sessionInfo.webId;\n    this.info.sessionId = sessionInfo.sessionId;\n    this.info.expirationDate = sessionInfo.expirationDate;\n    this.events.on(EVENTS.SESSION_EXTENDED, (expiresIn: number) => {\n      this.info.expirationDate = Date.now() + expiresIn * 1000;\n    });\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { Session } from \"./Session\";\n\nlet defaultSession: Session | undefined;\n\n/**\n * Obtain the {@link Session} used when not explicitly instantiating one yourself.\n *\n * When using the top-level exports {@link fetch}, {@link login}, {@link logout},\n * {@link handleIncomingRedirect}, {@link onLogin} and {@link onLogout}, these apply to an\n * implicitly-instantiated {@link Session}.\n * This function returns a reference to that Session in order to obtain e.g. the current user's\n * WebID.\n * @since 1.3.0\n */\nexport function getDefaultSession(): Session {\n  if (typeof defaultSession === \"undefined\") {\n    defaultSession = new Session();\n  }\n  return defaultSession;\n}\n\n/**\n * This function's signature is equal to `window.fetch`, but if the current user is authenticated\n * (see [[login]] and [[handleIncomingRedirect]]), requests made using it will include that user's\n * credentials. If not, this will behave just like the regular `window.fetch`.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch}\n * @since 1.3.0\n */\n/* eslint-disable-next-line no-shadow */\nexport const fetch: Session[\"fetch\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.fetch(...args);\n};\n\n/**\n * Triggers the login process. Note that this method will redirect the user away from your app.\n *\n * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.\n * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by [[handleIncomingRedirect]].\n * @since 1.3.0\n */\nexport const login: Session[\"login\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.login(...args);\n};\n\n/**\n * Logs the user out of the application.\n *\n * By default this does not log the user out of their Solid identity provider.\n * In order to do so, you must set the logoutType to `idp`. For usage details\n * see {@link Session.logout}.\n *\n * @since 1.3.0\n */\nexport const logout: Session[\"logout\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.logout(...args);\n};\n\n/**\n * Completes the login process by processing the information provided by the Solid identity provider through redirect.\n *\n * @param url The URL of the page handling the redirect, including the query parameters — these contain the information to process the login.\n * @since 1.3.0\n */\nexport const handleIncomingRedirect: Session[\"handleIncomingRedirect\"] = (\n  ...args\n) => {\n  const session = getDefaultSession();\n  return session.handleIncomingRedirect(...args);\n};\n\n/**\n * Register a callback function to be called when a user completes login.\n *\n * The callback is called when {@link handleIncomingRedirect} completes successfully.\n * @since 1.3.0\n *\n * @param callback The function called when a user completes login.\n * @deprecated Prefer events.on(EVENTS.LOGIN, callback)\n\n */\nexport const onLogin: Session[\"onLogin\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onLogin(...args);\n};\n\n/**\n * Register a callback function to be called when a user logs out:\n *\n * @param callback The function called when a user completes logout.\n * @since 1.3.0\n * @deprecated Prefer events.on(EVENTS.LOGOUT, callback)\n *\n */\nexport const onLogout: Session[\"onLogout\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onLogout(...args);\n};\n\n/**\n * Register a callback function to be called when a session is restored:\n *\n * @param callback The function called when a session is restored.\n * @since 1.3.0\n * @deprecated Prefer events.on(EVENTS.SESSION_RESTORED, callback)\n */\nexport const onSessionRestore: Session[\"onSessionRestore\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onSessionRestore(...args);\n};\n\n/**\n * {@link SessionEventEmitter} instance to subscribe to events by the default session.\n *\n * @since 1.14.0\n */\nexport const events = (): Session[\"events\"] => {\n  return getDefaultSession().events;\n};\n"],"names":["ClientAuthenticationBase","uniFetch","clearBase"],"mappings":"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"}